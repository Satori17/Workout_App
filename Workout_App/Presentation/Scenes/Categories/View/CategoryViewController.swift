//
//  CategoryViewController.swift
//  Workout_App
//
//  Created by Saba Khitaridze on 30.07.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryDisplayLogic: AnyObject {
    func displayCategory(from viewModel: CategoryModel.ViewModel)
    func didFailDisplayCategory(withError message: String)
}


class CategoryViewController: UIViewController {
    
    //MARK: - IBOutlets
    
    @IBOutlet weak var categoriesTableView: UITableView!
    
    //MARK: - Vars
    
    var interactor: CategoryBusinessLogic?
    var router: CategoryRoutingLogic?
    var errorMessage = ""
    var allCategories: [CategoryViewModel] = [] {
        didSet {
            categoriesTableView.reloadData()
            ActivityIndicatorManager.shared.stopAnimating()
        }
    }
    
    //MARK: - Object Lifecycle

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        CategoryConfigurator.configure(vc: self)
    }
    
    //MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        ActivityIndicatorManager.shared.setupActivityIndicator(self)
        //registering cell
        categoriesTableView.registerNib(class: CategoryCell.self)
        makeRequest()
    }
    
    //for cell shadow adaptation
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        categoriesTableView.reloadData()
        
    }
    
    //MARK: - Methods
    
    //Making request
    private func makeRequest() {
        interactor?.getCategories()
    }
    
}

//MARK: - custom protocol Delegates

extension CategoryViewController: CategoryDisplayLogic {    
    
    func displayCategory(from viewModel: CategoryModel.ViewModel) {
        allCategories = viewModel.displayedCategories
    }
    
    func didFailDisplayCategory(withError message: String) {
        errorMessage = message
    }
}

//MARK: - TableView Delegates

extension CategoryViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        allCategories.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        130
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(forIndexPath: indexPath) as CategoryCell
        let currentCategory = allCategories[indexPath.row]
        cell.configure(with: currentCategory)
                
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let currentCategory = allCategories[indexPath.row]
        router?.routeToWorkouts(withId: currentCategory.id, name: currentCategory.name)
    }

}
