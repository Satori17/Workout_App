//
//  CategoryViewController.swift
//  Workout_App
//
//  Created by Saba Khitaridze on 30.07.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CategoryDisplayLogic: AnyObject {
    func displayCategory(from viewModel: CategoryModel.ViewModel)
    func didFailDisplayCategory(withError message: String)
}


class CategoryViewController: UIViewController {
    
    //MARK: - IBOutlets
    
    @IBOutlet weak var categoriesTableView: UITableView!
    
    //MARK: - Vars
    
    var interactor: CategoryBusinessLogic?
    var router: CategoryRoutingLogic?
    var errorMessage = ""
    var allCategories: [CategoryViewModel] = [] {
        didSet {
            categoriesTableView.reloadData()
            ActivityIndicator.shared.activityIndicator.stopAnimating()
        }
    }
    
    //MARK: - Object Lifecycle

    required init?(coder: NSCoder) {
        super.init(coder: coder)
        CategoryConfigurator.configure(vc: self)
    }
    
    //MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        ActivityIndicator.shared.setupActivityIndicator(self)
        //registering cell
        categoriesTableView.registerNib(class: CategoryCell.self)
        makeRequest()
    }
    
    //for cell shadow adaptation
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        categoriesTableView.reloadData()
        
    }
    
    //MARK: - Methods
    
    //Making request
    private func makeRequest() {
        let request = CategoryModel.Request()
        interactor?.getCategories(request: request)
    }
    
}


extension CategoryViewController: CategoryDisplayLogic {    
    
    func displayCategory(from viewModel: CategoryModel.ViewModel) {
        allCategories = viewModel.displayedCategories
    }
    
    func didFailDisplayCategory(withError message: String) {
        errorMessage = message
    }
}


/*
 private func makeEffectView() {
     let effect: UIBlurEffect = UIBlurEffect(style: UIBlurEffect.Style.light)
     effectView = UIVisualEffectView(effect: effect)
     effectView.frame = CGRect(x: 0, y: 0, width: UIScreen.main.bounds.size.width, height: UIScreen.main.bounds.size.height)
     self.view.addSubview(effectView)
 }
 */
